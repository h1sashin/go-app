// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Unit string

const (
	UnitG    Unit = "g"
	UnitMl   Unit = "ml"
	UnitTbsp Unit = "tbsp"
	UnitTsp  Unit = "tsp"
	UnitCup  Unit = "cup"
	UnitOz   Unit = "oz"
	UnitLb   Unit = "lb"
)

func (e *Unit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Unit(s)
	case string:
		*e = Unit(s)
	default:
		return fmt.Errorf("unsupported scan type for Unit: %T", src)
	}
	return nil
}

type NullUnit struct {
	Unit  Unit
	Valid bool // Valid is true if Unit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUnit) Scan(value interface{}) error {
	if value == nil {
		ns.Unit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Unit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUnit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Unit), nil
}

type Country struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
	Code      string
}

type Ingredient struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
	Amount    int32
	Unit      Unit
	RecipeID  pgtype.UUID
	ProductID pgtype.UUID
}

type Language struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
	Code      string
}

type Product struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Vendor    pgtype.Text
	Calories  int32
	Fat       int32
	Carbs     int32
	Protein   int32
	CountryID pgtype.UUID
}

type ProductTranslation struct {
	ID          uuid.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Name        string
	Ingredients string
	Barcode     string
	PackageSize int32
	ProductID   pgtype.UUID
	LanguageID  pgtype.UUID
}

type Recipe struct {
	ID          uuid.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Name        string
	Description string
	CountryID   pgtype.UUID
	AuthorID    pgtype.UUID
}

type User struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Email     string
	Password  string
	Role      Role
}
