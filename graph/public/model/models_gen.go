// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type SignInResult interface {
	IsSignInResult()
}

type SignUpResult interface {
	IsSignUpResult()
}

type Mutation struct {
}

type Query struct {
}

type SignInError struct {
	Code    SignInErrorCode `json:"code"`
	Message string          `json:"message"`
}

func (SignInError) IsSignInResult() {}

type SignInSuccess struct {
	Tokens *Tokens `json:"tokens"`
	User   *User   `json:"user"`
}

func (SignInSuccess) IsSignInResult() {}

type SignUpError struct {
	Code    SignUpErrorCode `json:"code"`
	Message string          `json:"message"`
}

func (SignUpError) IsSignUpResult() {}

type SignUpSuccess struct {
	Tokens *Tokens `json:"tokens"`
	User   *User   `json:"user"`
}

func (SignUpSuccess) IsSignUpResult() {}

type Tokens struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type User struct {
	ID    string `json:"id"`
	Email string `json:"email"`
	Role  Role   `json:"role"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SignInErrorCode string

const (
	SignInErrorCodeAccountBanned      SignInErrorCode = "ACCOUNT_BANNED"
	SignInErrorCodeInvalidCredentials SignInErrorCode = "INVALID_CREDENTIALS"
	SignInErrorCodeTooManyAttempts    SignInErrorCode = "TOO_MANY_ATTEMPTS"
)

var AllSignInErrorCode = []SignInErrorCode{
	SignInErrorCodeAccountBanned,
	SignInErrorCodeInvalidCredentials,
	SignInErrorCodeTooManyAttempts,
}

func (e SignInErrorCode) IsValid() bool {
	switch e {
	case SignInErrorCodeAccountBanned, SignInErrorCodeInvalidCredentials, SignInErrorCodeTooManyAttempts:
		return true
	}
	return false
}

func (e SignInErrorCode) String() string {
	return string(e)
}

func (e *SignInErrorCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SignInErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SignInErrorCode", str)
	}
	return nil
}

func (e SignInErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SignUpErrorCode string

const (
	SignUpErrorCodeEmailAlreadyRegistered SignUpErrorCode = "EMAIL_ALREADY_REGISTERED"
	SignUpErrorCodeTooManyAttempts        SignUpErrorCode = "TOO_MANY_ATTEMPTS"
)

var AllSignUpErrorCode = []SignUpErrorCode{
	SignUpErrorCodeEmailAlreadyRegistered,
	SignUpErrorCodeTooManyAttempts,
}

func (e SignUpErrorCode) IsValid() bool {
	switch e {
	case SignUpErrorCodeEmailAlreadyRegistered, SignUpErrorCodeTooManyAttempts:
		return true
	}
	return false
}

func (e SignUpErrorCode) String() string {
	return string(e)
}

func (e *SignUpErrorCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SignUpErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SignUpErrorCode", str)
	}
	return nil
}

func (e SignUpErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
